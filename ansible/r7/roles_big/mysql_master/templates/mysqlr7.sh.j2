#!/bin/bash

package_sysname="r7-office";
MYSQL_SERVER_HOST=${MYSQL_SERVER_HOST:-"{{ hostvars['master_node'].ansible_host }}"}
MYSQL_SERVER_DB_NAME=${MYSQL_SERVER_DB_NAME:-"${package_sysname}"}
MYSQL_SERVER_USER=${MYSQL_SERVER_USER:-"{{ mysql_user }}"}
MYSQL_SERVER_PASS=${MYSQL_SERVER_PASS:-"{{ mysql_pass }}"}
MYSQL_SLAVE_USER=${MYSQL_SLAVE_USER:-"{{ mysql_user_repl }}"}
MYSQL_SLAVE_PASS=${MYSQL_SLAVE_PASS:-"{{ mysql_pass_repl }}"}
MYSQL_SERVER_PORT=${MYSQL_SERVER_PORT:-3306}
MYSQL_TEMPORARY_ROOT_PASS=""
DIR=/tmp

MYSQL_root="mysql -u$MYSQL_SERVER_USER -p$MYSQL_SERVER_PASS"

################ creating users for CS work

{% if cs_cluster == "true" %}
$MYSQL_root -e "CREATE USER '${MYSQL_SERVER_USER}'@'{{ hostvars['cs_1'].ansible_host }}' IDENTIFIED BY '${MYSQL_SERVER_PASS}';"
$MYSQL_root -e "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_SERVER_USER}'@'{{ hostvars['cs_1'].ansible_host }}';"
$MYSQL_root -e "FLUSH PRIVILEGES;"
$MYSQL_root -e "CREATE USER '${MYSQL_SERVER_USER}'@'{{ hostvars['cs_2'].ansible_host }}' IDENTIFIED BY '${MYSQL_SERVER_PASS}';"
$MYSQL_root -e "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_SERVER_USER}'@'{{ hostvars['cs_1'].ansible_host }}';"
$MYSQL_root -e "FLUSH PRIVILEGES;"
{% else %}
$MYSQL_root -e "CREATE USER '${MYSQL_SERVER_USER}'@'{{ hostvars['cs_1'].ansible_host }}' IDENTIFIED BY '${MYSQL_SERVER_PASS}';"
$MYSQL_root -e "GRANT ALL PRIVILEGES ON *.* TO '${MYSQL_SERVER_USER}'@'{{ hostvars['cs_1'].ansible_host }}';"
$MYSQL_root -e "FLUSH PRIVILEGES;"
{% endif %}

systemctl restart mysqld

################ assigning variables for further work

MYSQL=""
DB_HOST="localhost"
DB_NAME=${MYSQL_SERVER_DB_NAME}
DB_USER=${MYSQL_SERVER_USER}
DB_PWD=${MYSQL_SERVER_PASS}

################ set up a connection to MySQL

establish_db_conn() {
        echo -n "Trying to establish MySQL connection... "

        command -v mysql >/dev/null 2>&1 || { echo "MySQL client not found"; exit 1; }

        MYSQL="mysql -h$DB_HOST -u$DB_USER"
        if [ -n "$DB_PWD" ]; then
                MYSQL="$MYSQL -p$DB_PWD"
        fi

        $MYSQL -e ";" >/dev/null 2>&1
        ERRCODE=$?
        if [ $ERRCODE -ne 0 ]; then
                systemctl mysqld start >/dev/null 2>&1
                $MYSQL -e ";" >/dev/null 2>&1 || { echo "FAILURE"; exit 1; }
        fi

        echo "OK"
}

################ mysql connection test function

function mysql_check_connection() {
        while ! $MYSQL -e ";" >/dev/null 2>&1; do
                sleep 1
        done
}


################ database scripts execution

execute_db_scripts() {

        local CNF_PATH="/etc/my.cnf";
        local CNF_SERVICE_PATH="/usr/lib/systemd/system/mysqld.service";

        if ! grep -q "\[mysqld\]" ${CNF_PATH}; then
                        CNF_PATH="/etc/my.cnf.d/server.cnf";

                        if ! grep -q "\[mysqld\]" ${CNF_PATH}; then
                                exit 1;
                        fi
        fi 

        if ! grep -q "\[Unit\]" ${CNF_SERVICE_PATH}; then
                        CNF_SERVICE_PATH="/lib/systemd/system/mysqld.service";

                        if ! grep -q "\[Unit\]" ${CNF_SERVICE_PATH}; then
                                CNF_SERVICE_PATH="/lib/systemd/system/mariadb.service";

                                if ! grep -q "\[Unit\]" ${CNF_SERVICE_PATH}; then 
                                        exit 1;
                                fi
                        fi
        fi 

        mysql_check_connection

        if [ "$DB_USER" = "root" ] && [ ! "$(mysql -V | grep ' 5.5.')" ]; then
           # allow MySql.Data.dll connect via mysql_native_password with root and empty password
           $MYSQL -D "mysql" -e "update user set plugin='mysql_native_password' where user='root';ALTER USER '${DB_USER}'@'${DB_HOST}' IDENTIFIED WITH mysql_native_password BY '${DB_PWD}';"
        fi

        DB_TABLES_COUNT=$($MYSQL --silent --skip-column-names -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='${DB_NAME}'");

        if [ "${DB_TABLES_COUNT}" -eq "0" ]; then
                echo "Installing MySQL database... "
                

                $MYSQL -e 'CREATE DATABASE IF NOT EXISTS `'$DB_NAME'` CHARACTER SET utf8 COLLATE `utf8_general_ci`;'
                $MYSQL "$DB_NAME" < $DIR/r7-office.sql
                $MYSQL "$DB_NAME" < $DIR/r7-office.data.sql
        else
                echo "Upgrading MySQL database... "

                for i in $(ls $DIR/r7-office.upgrade*); do
                                $MYSQL "$DB_NAME" < ${i};
                done

                APP_INDEX_DIR="${DIR}/Index/v7.9.0/"

                if [ ! -d "$APP_INDEX_DIR/nodes" ]; then
                        $MYSQL "$DB_NAME" -e "TRUNCATE webstudio_index";
                fi
        fi
}

establish_db_conn
execute_db_scripts